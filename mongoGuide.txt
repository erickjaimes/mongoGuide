##Mongo starters guide

##Interactions with mongo

##vairables
> var potion ={
	"name": "invisibility",
	"vendor": "kettlecooked"
 }

##change db
> use database1

##insert document in a collection
> db.potions.insert(
  {
	"name": invisibility",
	"vendor"kettlecooked"
  }
)

##finding from inventory
> db.potions.find({"name":"invisibility"})
## mongo will generate an ID

##trydates and embedded documents
> db.potions.insert(
 {
	"name": "invisibility",
	"vendor": "kettlecooked",
	"price": 10,99,
	"score": 59,
	"tryDate": new Date(2012,8,13),
	"ingredients": ["newt toes, 42, laughter"],
	"ratings": {"strength": 2, "flavor": 5},
 }
)
##remove documents
##this will remove all  of the documents that match the search
> db.potions.remove(
	{"name": "Love"}
)

##update to midify existing docuemnts
> db.potions.update(
	{"name": "love"},
	{"$set": {"price":3.99}}
 )
## use {"multi": true} to modify all matching documents
## use {"$inc": {"count":1}} to increment the count of an existing document
## use {"upsert": true} if a field doesnt exist to create a new one

##remove fields from docuemnts
##this removes the field color from all potions
> db.potions.update(
	{},
	{"$unset": {"color": ""}},
	{"multi": true}
)
#use {"$rename": {"score": "grade"}} to update the name of a field
#use {"$set": {"ingredients.1": 42}} to update a value in an array
## the .[number] is the place of the object you want to modify in the array
## or use .$ with multi to update all that match
## use {"$pop": {"categories": 1}} to remove the last element or -1  for the first
## use {"$push": {"categories": budget}} to add at the end
## use {"$pull": {"categories": tasty}} to remove from the array

##finding with operators
## $gt greater than
## $gte greater than or equal to
## $ne not equal
## $lt less than
## $lte less than or equal to

##prices less than 20:
> db.potions.find({"price": {"$lt":20}})

##prices greater than 10 and less than 20:
> db.potions.find({"price": {"$gt":10, "lt":20}})

##non equal example:
> db.potions.find({"vendor":{"$ne":"brewers"}})
## use "$elemMatch" when searching an array to select at least 1 value

##Introducing Projections
> db.potions.find(
	{"grade": {"$gte": 80}},
	{"vendor": true, "name": true})
##When selecting fields, all other fields but the _id are set to false

##excluding fields
> db.potions.find(
	{"grade": {"$gte": 80}},
	{"vendor": true, "name": false})
##all fields but the selected one are set to true
> db.potions.find(
	{"grade": {"$gte": 80}},
	{"vendor": true, "price": true, "_id":false})
##Tje _id field is always returned whenever selecting or excluding fields
##its the only field that can be set to false when selecting other fields

##Introducing the cursor
##When searching for documents, and object is returned to find the method called a cursor subject

> db.potions.find({"vendor":"kettlecooked"})
#this returns the first 20 documents
>it
##this will display the next 20 documents
>db.potions.find().count()
##returns the count of matching documents

##Sorting Potions
> db.potions.find().sort({"price":1})
##use -1 to order in descending and 1 to order in ascending

##Basic Pagination
>db.potions.find().limit(3)
##we limit the search for 3 the first 3 documents

> db.potions.find().skip(3).limit(3)
##the first 3 results are skipped and because of the limit, the next 3 are taken

##Inserting Referenced Docuements
> db.potions.vendors.inser({
	"_id": "kettlecooked",
	"phone": 555555555,
	"organic": true
})
##we can specify the unique _id of the document
> db.potions.inser({
	"name": "invisibility",
	"vendor_id": "kettlecooked"
})
##or with a referenced document as is the vendor id
##Querying a referenced document

> db.potions.find({"name":"invisibility"})
##first query to retrieve the potion information

> db.vendors.find({"_id":"kettlecooked"})
##second query to retrieve vendor information

>db.users.find({},{"email":true,"favorites":true})
##with a single query we got the email and the favorite potions

##Atomic write operations
> db.users.insert({
	"username": "Azrius",
	"email": axrius@example.com",
	"favorites": ["Newt...,"Sleeping","Love"]
})
##if an update on the email and favorites occurs but there is an error in the potion then no update will occur
##when referencing vendor documents, they now exist outside of potion documents

##Morphing Models
##







--------------------------------------------------------------------------------
Mongo questions
1. How does a collection differ from a table?

Instead of tables, a MongoDB database stores its data in collections.
A collection holds one or more BSON documents. Documents are analogous
to records or rowsin a relational database table. Each document has one or more
fields; fields are similar to the columns in a relational database table.


2.What is sharding in MongoDB?

The procedure of storing data records across multiple machines is referred as
Sharding. It is a MongoDB approach to meet the demands of data growth. It is the
horizontal partition of data in a database or search engine. Each partition is
referred as shard or database shard.


3.Mention how you can inspect the source code of a function?

To inspect a source code of a function, without any parentheses, the function
must be invoked.


4. What are alternatives to MongoDB?

Cassandra, CouchDB, Redis, Riak, Hbase are a few good alternatives.


5.When do we use Namespace in MongoDB?

During sequencing of the names of the database and collection name Namespace is used.


6.Explain the situation when an index does not fit into RAM?

When an index is too huge to fit into RAM, then MongoDB reads the index, which is
faster than reading RAM because the indexes easily fit into RAM if the server has
got RAM for indexes along with the remaining set.


7.How does MongoDB provide consistency?

MongoDB uses the reader-writer locks, allowing simultaneous readers to access any
supply like a database or any collection. But always offers private access to
singles writes.


8.Explain Replication

Replication is the process of synchronizing data across multiple servers.


9.What is use of GridFS in mongodb?

GridFS is used for storing and retrieving the large files like audio, Images, Video files.


10.Define primary replica sets?

The primary replica set accepts all write operations from clients.


11.Define secondary replica sets.

The secondaries replicate the primary’s oplog and apply the operations to their
data sets such that the secondaries’ data sets reflect the primary’s data set.


12.What is the use of profiler?

Profiler is used to show the performance characteristics of every operation against the database.


13.Which type of data mongodb store?

MongoDB stores data in the form of documents, which are JSON-like field and value pairs.


14.What is storage encryption?

Storage Encryption encrypts all MongoDB data on the storage or operating system to ensure
that only authorized processes can access protected data.


15.What are the components of shared cluster?

Sharded cluster has the following components: shards, query routers and config servers.


References:
https://docs.mongodb.com/manual/faq/fundamentals/#what-platforms-does-mongodb-support
https://www.guru99.com/mongodb-interview-questions.html